//construct binary tree from inorder & preorder

//{ Driver Code Starts
//

#include<bits/stdc++.h>
using namespace std;

struct Node
{
	int data;
	struct Node *left;
	struct Node *right;
	
	Node(int x){
	    data = x;
	    left = NULL;
	    right = NULL;
	}
};


void printPostOrder(Node *root)
{
	if(root==NULL)
		return;
	printPostOrder(root->left);
	printPostOrder(root->right);
	cout<<root->data<<" ";
}

// } Driver Code Ends


/*Complete the code here.
Node is as follows:
struct Node
{
  int data;
  Node* left;
  Node* right;
};
*/
class Solution{
    public:
     void createmapping(int in[], map<int,int> &nodetoindex,int n){
        for(int i=0 ; i<n;i++){
            nodetoindex[in[i]]=i;
        }
    }
    Node* solve(int in[],int post[],int &index,int inorderstart,int inorderend, int n, map<int,int> &nodetoindex){
        if(index < 0 || inorderstart>inorderend){
            return NULL;
        }
        int element =post[index--];
        Node *root=new Node(element);
        int position =nodetoindex[element];
        root->right=solve(in,post,index,position+1,inorderend,n,nodetoindex);
        root->left=solve(in,post,index,inorderstart,position-1,n,nodetoindex);
       
        return root;
    }
    Node* buildTree(int in[],int post[], int n)
    {
        int postorderindex =n-1;
        map<int,int> nodetoindex;
        createmapping(in, nodetoindex,n);
        Node* ans = solve(in,pre,postorderindex,0,n-1,n,nodetoindex);
        return ans;
    }
};

//{ Driver Code Starts.
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;
		
		int inorder[n], preorder[n];
		for(int i=0; i<n; i++)
			cin>> inorder[i];
		for(int i=0; i<n; i++)
			cin>> preorder[i];
		Solution obj;
		Node *root = obj.buildTree(inorder, preorder, n);
		printPostOrder(root);
		cout<< endl;
	}
}

// } Driver Code Ends

//construct binary tree from inorder and post order 
//{ Driver Code Starts
/* program to construct tree using inorder and postorder traversals */
#include <bits/stdc++.h>
using namespace std;

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct Node {
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x) {
        data = x;
        left = right = NULL;
    }
};

/* This funtcion is here just to test buildTreeUtil() */
void preOrder(Node* node) {
    if (node == NULL) return;

    /* then print the data of node */
    printf("%d ", node->data);

    /* first recur on left child */
    preOrder(node->left);

    /* now recur on right child */
    preOrder(node->right);
}

Node* buildTree(int in[], int post[], int n);

int main() {
    int t, n;
    cin >> t;
    while (t--) {
        cin >> n;
        int in[n], post[n];
        for (int i = 0; i < n; i++) cin >> in[i];
        for (int i = 0; i < n; i++) cin >> post[i];
        Node* root = buildTree(in, post, n);
        preOrder(root);
        cout << endl;
    }
    return 0;
}

// } Driver Code Ends


/* Tree node structure

struct Node
{
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x){
        data = x;
        left = right = NULL;
    }
};*/

//Function to return a tree created from postorder and inoreder traversals.
void createmapping(int in[], map<int,int> &nodetoindex,int n){
        for(int i=0 ; i<n;i++){
            nodetoindex[in[i]]=i;
        }
    }
    Node* solve(int in[],int post[],int &index,int inorderstart,int inorderend, int n, map<int,int> &nodetoindex){
        if(index < 0 || inorderstart>inorderend){
            return NULL;
        }
        int element =post[index--];
        Node *root=new Node(element);
        int position =nodetoindex[element];
        root->right=solve(in,post,index,position+1,inorderend,n,nodetoindex);
        root->left=solve(in,post,index,inorderstart,position-1,n,nodetoindex);
       
        return root;
    }
    Node* buildTree(int in[],int post[], int n)
    {
        int postorderindex =n-1;
        map<int,int> nodetoindex;
        createmapping(in, nodetoindex,n);
        Node* ans = solve(in,post,postorderindex,0,n-1,n,nodetoindex);
        return ans;
    }
